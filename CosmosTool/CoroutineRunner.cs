//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34209
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Cosmos.Tool
{
    public class Coroutine
    {
        public Action<object> OnYield;
        public IEnumerator Enumtor { get; private set; }
        public bool IsFinished { get; internal set; }

        private Coroutine()
        {
        }

        internal Coroutine(IEnumerator enumtor)
        {
            Enumtor = enumtor;
        }

        public static Coroutine Start(IEnumerator em)
        {
            return CoroutineRunner.Start(em);
        }
    }
    public class CoroutineRunner
    {
        /// <summary>
        /// 25 frame every seconds
        /// 1000ms / 25ms = 40
        /// </summary>
        private static int HeartbeatMilliseconds = 40;

        private static CoroutineRunner Instance = new CoroutineRunner();
        private static LinkedList<Coroutine> _coroutines = new LinkedList<Coroutine>();

        private CoroutineRunner()
        {
            DoLoopTaskAsync();
        }

        void DoLoopTaskAsync()
        {
            var t = new Thread(() =>
            {
                while (true)
                {
                    var node = _coroutines.First;
                    if (node != null)
                    {
                        do
                        {
                            var co = node.Value;
                            if (!co.Enumtor.MoveNext())
                            {
                                co.IsFinished = true;
                                var lastNode = node;
                                node = node.Next;
                                _coroutines.Remove(lastNode);
                            }
                            else
                            {
                                if (co.OnYield != null)
                                    co.OnYield(co.Enumtor.Current);

                                node = node.Next;
                            }

                        }
                        while (node != null);
                    }

                    Thread.Sleep(HeartbeatMilliseconds);
                }
            });
            t.Start();
        }

        public static void SetupHeartbeatMilliseconds(int ms)
        {
            HeartbeatMilliseconds = ms;
        }

        public static Coroutine Start(IEnumerator enumtor)
        {
            var co = new Coroutine(enumtor);
            _coroutines.AddLast(co);
            return co;
        }
    }
}

