//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using etcetera;
using NLog;

namespace Cosmos.Actor
{
	/// <summary>
	/// Etcd discovery services
	/// </summary>
	public class EtcdDiscoveryMode : DiscoveryMode
	{
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger();

        private EtcdClient _etcdClient;

        /// <summary>
        /// etcd get to async
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        public Task<EtcdResponse> GetAsync(string key)
	    {
	        TaskCompletionSource<EtcdResponse> tcs = new TaskCompletionSource<EtcdResponse>();
            
            Task.Factory.StartNew(()=>
            {
                tcs.SetResult(_etcdClient.Get(key));
            });


	        return tcs.Task;
	    }
        public Task<EtcdResponse> SetAsync(string key, string value)
        {
            TaskCompletionSource<EtcdResponse> tcs = new TaskCompletionSource<EtcdResponse>();
            Task.Factory.StartNew(() =>
            {
                tcs.SetResult(_etcdClient.Set(key, value));
            });


            return tcs.Task;
        }

        public EtcdDiscoveryMode (params string[] discoveryServers)
		{
            foreach (var etcdUrl in discoveryServers)
            {
                var etcdClient = new EtcdClient(new Uri(string.Format("{0}/v2/keys", etcdUrl)));
                try
                {
                    etcdClient.Statistics.Leader();
                    _etcdClient = etcdClient;
                }
                catch (Exception e)
                {
                    Logger.Error(e.Message);
                    Logger.Error("Invalid Etcd Host: {0}", etcdUrl);
                    continue;
                }
            }

            if (_etcdClient == null)
                throw new Exception("Not valid EtcdClient");
        }
		public override IList<ActorNodeConfig> GetNodes()
		{
            return null;
		}
	}
}

